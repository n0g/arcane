#! /usr/bin/env python
"""arcane-maildir

This tool iterates over all emails in a local maildir and encrypts all
unencrypted mail.

The MIT License (MIT)

Copyright (c) 2013 Matthias Fassl <mf@n0g.at>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

"""

import re
import os
import sys
import argparse
import getpass
import email
import mailbox

from util import Util
from gpg import GPGDecryption
from gpg import GPGEncryption

def is_encrypted(mail):
	return mail.get_content_type() == "multipart/encrypted"

def main(argv=None):
	parser = argparse.ArgumentParser(description="Encrypt all mails in a maildir")
	parser.add_argument('-k','--key',help="Public key Identifier that will be used to encrypt the mails",required=True,nargs='+')
	parser.add_argument('-m','--maildir',help="Specifies the location of Maildir to encrypt",required=True)
	parser.add_argument('-d','--decrypt',help="Optional argument for decryption (useful for key rollover)",action="store_true")
	ns = parser.parse_args()

	# check number of keys
	if ns.decrypt and len(ns.key) > 1:
		print sys.stderr, "Warning: Only the first key will be used for decryption"

	# fetch passwords from user
	if ns.decrypt:
		ns.gpg_passphrase = getpass.getpass("GPG Passphrase: ")

	# iterate over all mails and encrypt or decrypt them
	src_mbox = mailbox.Maildir(ns.maildir, factory=mailbox.MaildirMessage) 

	print "Root Maildir:"
	handle_maildir(ns,src_mbox)
	for subdir in src_mbox.list_folders():
		print subdir + ":"
		handle_maildir(ns,src_mbox.get_folder(subdir))

	# Subdir names might not start with a dot which is expected by list_folders()
	for subdir in os.listdir(ns.maildir):
		if os.path.isdir(os.path.join(ns.maildir, subdir)) and subdir != 'new' and subdir != 'cur' and subdir != 'tmp':
			print subdir + ":"
			handle_maildir(ns,mailbox.Maildir(os.path.join(ns.maildir, subdir), factory=mailbox.MaildirMessage))

def handle_maildir(crypto_ns,maildir):
	for mail_key,mail in maildir.items():
		#print mail_key
		if not crypto_ns.decrypt:
			if not is_encrypted(mail):
				mail = GPGEncryption().encryptPGP(mail, crypto_ns.key)
				maildir[mail_key] = mail
				sys.stdout.write('#')
			else:
				sys.stdout.write('x')
		else:
			if is_encrypted(mail):
				mail = GPGDecryption().decryptPGP(mail,crypto_ns.key[0],crypto_ns.gpg_passphrase)
				maildir[mail_key] = mail
				sys.stdout.write('.')
			else:
				sys.stdout.write('X')
		sys.stdout.flush()
	print "\n"

if __name__  == "__main__":
	sys.exit(main())
